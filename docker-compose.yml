version: "3.5"

networks:
  monitor-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}

services:

  triton:
    image: 'nvcr.io/nvidia/tritonserver:22.06-py3'
    env_file: .aws.env
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    command:
      [
        'tritonserver',
        '--model-repository=s3://sarah-majors/models/'
      ]

  main:
    build:
      context: ./
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: /home/ubuntu/xView2_baseline
        target: /working_dir
    ports:
      - "8005:8005"
    depends_on:
      - triton
      - damage-classification

  damage-classification:
    build:
      context: ./model
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: /home/ubuntu/xView2_baseline
        target: /working_dir
    ports:
      - "8006:8006"
    depends_on:
      - triton

  prometheus:
    image: prom/prometheus:v2.17.1
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:6.7.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
